version: '3.9'
services:  
  # mlflow-server:
  #   build: ./mlflow-server
  #   image: mlflow-server
  #   container_name: mlflow-server
  #   ports:
  #    - "5000:5000"
  #   labels:
  #     - "traefik.http.routers.mlflow-server.rule=Host(`mlflow.lorden.home`)"
  #   depends_on:
  #     - minio-s3
  #     - db
  #   command: >
  #     mlflow server 
  #     --backend-store-uri mysql+pymysql://root:password@db:3306/mlflow
  #     --serve-artifacts
  #     --host 0.0.0.0
  #     --gunicorn-opts "--log-level debug"
  #     --default-artifact-root http://mlflowproxy.localhost/api/2.0/mlflow-artifacts/artifacts/experiments
  #   # --default-artifact-root http://localhost:5500/api/2.0/mlflow-artifacts/artifacts/experiments
  #   # --default-artifact-root http://mlflow-artifact-proxy:5500/api/2.0/mlflow-artifacts/artifacts/experiments

  # mlflow-artifact-proxy:
  #   build: ./mlflow-server
  #   image: mlflow-server
  #   container_name: mlflow-artifact-proxy
  #   expose:
  #     - "5500"
  #   ports:
  #    - "5500:5500"
  #   environment:
  #     MLFLOW_S3_ENDPOINT_URL: http://minio-s3:9000
  #     AWS_ACCESS_KEY_ID: "user"
  #     AWS_SECRET_ACCESS_KEY: "password"
  #     MLFLOW_S3_IGNORE_TLS: true  # Use this if minio is configured with using SSL self-signed or signed using some internal-only CA certificate
  #   labels:
  #     - "traefik.http.routers.mlflow-artifact-proxy.rule=Host(`mlflowproxy.localhost`)"
  #   command: >
  #     mlflow server
  #     --host 0.0.0.0
  #     --port 5500
  #     --artifacts-destination s3://mlflow
  #     --artifacts-only
  #     --gunicorn-opts "--log-level debug"

  db:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
      - "33060:33060"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: mlflow
    volumes:
      - ./mysql-data:/var/lib/mysql
    restart: unless-stopped

  minio-s3:
  # TODO: Do health check?
    image: minio/minio
    container_name: minio-s3
    ports:
      - "9000:9000"
      - "9090:9090"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    volumes:
      - ./s3-data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-s3.rule=Host(`minio.lorden.home`)"
      - "traefik.http.routers.minio-s3.entrypoints=websecure"
      - "traefik.http.routers.minio-s3.tls.certresolver=myresolver"
    command: server --console-address ":9001" /data
    restart: unless-stopped

  # Application dashboard
  homer:
    image: b4bz/homer
    container_name: homer
    volumes:
      - ./homer/:/www/assets
    ports:
      - "8081:8080"
    user: 1000:1000 # default
    # environment:
    #   - INIT_ASSETS=1 # default
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=Host(`homer.lorden.home`)"
      - "traefik.http.routers.homer.entrypoints=web"
      - "traefik.http.routers.homer.entrypoints=websecure"
      - "traefik.http.routers.homer.tls.certresolver=myresolver"
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ee:latest
    container_name: portainer
    ports:
      - 8000:8000
      - 9443:9443
    labels:
      - "traefik.enable=true"
      - "traefik.https.routers.portainer.rule=Host(`portainer.lorden.home`)"
      - "traefik.https.services.portainer.loadbalancer.server.port=9443"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      # - "traefik.http.routers.portainer.tls.certresolver=myresolver"
    volumes:
      - ./portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock

  reverse-proxy:
    image: traefik:v2.10
    container_name: traefik-reverse-proxy
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # ssl
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=postmaster@lorden.home"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "443:443"
      - "8080:8080" # Web UI
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reverse-proxy.rule=Host(`traefik.lorden.home`)"
      - "traefik.http.services.reverse-proxy.loadbalancer.server.port=8080"
      - "traefik.http.routers.reverse-proxy.entrypoints=websecure"
      - "traefik.http.routers.reverse-proxy.tls.certresolver=myresolver"
    volumes:
      - "./letsencrypt:/letsencrypt"
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped

  dns-server:
    image: ubuntu/bind9:9.18-22.04_beta
    container_name: bind9-dns-server
    environment:
      - BIND9_USER=root
      - TZ=Europe/Stockholm
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    volumes:
      - ./bind9/cache:/var/cache/bind
      - ./bind9/config:/etc/bind
      - ./records:/var/lib/bind
    restart: unless-stopped

volumes:
  mysql-data:
  s3-data:
  homer:
  portainer:

networks:
  loki:
