---
# Global settings
namespace: ai-workloads
replicaCount: 1

# Khoj Server Configuration
khoj:
  image:
    repository: ghcr.io/khoj-ai/khoj
    pullPolicy: IfNotPresent
    tag: "2.0.0-beta.15"

  service:
    type: ClusterIP
    port: 8000

  # GPU resource requests for the Khoj server pod
  gpu:
    enabled: true
    count: 1

  # Persistence for Khoj server data (e.g., indexes)
  persistence:
    enabled: true
    storageClassName: "" # Use default storage class or specify one
    size: 20Gi

  # Non-sensitive configuration passed as environment variables
  # Sensitive values (like passwords) should be in a SOPS-encrypted file
  config:
    KHOJ_DOMAIN: "khoj.homelab.local"
    KHOJ_NO_HTTPS: "True"
    OPENAI_BASE_URL: "http://ollama.ai-workloads.svc.cluster.local:11434"

# PostgreSQL with PostGIS Configuration
postgres:
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: "16-3.5-alpine"

  service:
    port: 5432

  persistence:
    enabled: true
    storageClassName: ""
    size: 10Gi

# Redis Configuration
redis:
  image:
    repository: redis
    pullPolicy: IfNotPresent
    tag: "7.2.5-alpine"

  service:
    port: 6379

  persistence:
    enabled: true
    storageClassName: ""
    size: 5Gi

# SearXNG Configuration
searxng:
  image:
    repository: searxng/searxng
    pullPolicy: IfNotPresent
    tag: "2024.1.20-1"

  service:
    port: 8080

# Terrarium Code Sandbox Configuration
terrarium:
  image:
    # WARNING: Only 'latest' tag is provided by upstream.
    # For production, it is highly recommended to replace this with an immutable digest.
    # Example: ghcr.io/khoj-ai/terrarium@sha256:<digest>
    repository: ghcr.io/khoj-ai/terrarium
    pullPolicy: IfNotPresent
    tag: "latest"

  service:
    port: 8080

# Ingress Configuration using K3s Traefik
ingress:
  enabled: true
  className: "" # K3s default Traefik does not require a class name
  annotations: {}
  host: "khoj.homelab.local"

# Secret management configuration
# The chart will create a secret from values provided by a SOPS-encrypted file.
# The name of the Kubernetes Secret object to be created.
secrets:
  name: "khoj-secrets"
  # Sensitive values will be populated from the SOPS file.
  # Example structure for your secrets.yaml file:
  # khoj:
  #   config:
  #     KHOJ_ADMIN_PASSWORD: "your_admin_password"
  #     KHOJ_DJANGO_SECRET_KEY: "your_django_secret_key"
  # postgres:
  #   user: "khoj"
  #   password: "your_postgres_password"
  #   db: "khoj"
